#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Author: Serg Kolo <1047481448@qq.com>
# Date: February 12, 2017
# Purpose: Clipboard manager indicator for Ubuntu
# Tested on: Ubuntu 16.04 LTS
# Written for: http://askubuntu.com/q/842386/295286
#
# Licensed under The MIT License (MIT).
# See included LICENSE file or the notice below.
#
# Copyright Â© 2017 Sergiy Kolodyazhnyy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import gi
gi.require_version('AppIndicator3', '0.1')
gi.require_version('Notify', '0.7')
from gi.repository import AppIndicator3
from gi.repository import Notify
from gi.repository import Gtk
from gi.repository import Gdk
from gi.repository import GLib
from collections import OrderedDict
import datetime as dt
import subprocess
import tempfile
import signal
import json
import sys
import os
import re

class IndicatorBulletin(object):

    def __init__(self):
        self.app = AppIndicator3.Indicator.new(
            'indicator-bulletin', "editpaste",
            AppIndicator3.IndicatorCategory.HARDWARE
            )

        # check if user wants to debug the indicator
        self.debug = False 
        if len(sys.argv) == 2 and sys.argv[1] == 'debug':
            self.debug = True

        user_home = os.environ['HOME']
        self.config_file = os.path.join(user_home,'.indicator-bulletin-config.json')
        if os.path.exists(self.config_file):
            try:
                self.read_config()
            except Exception as e:
                sys.stderr(">>> reading config:" + str(e) + "\n")
                pass
     
        self.history_file = os.path.join(user_home,'.indicator-bulletin-history.json')
        if os.path.exists(self.config_file):
            try:
                self.read_history()
            except Exception as e:
                sys.stderr(">>> reading history:" + str(e) + "\n")
                pass
        # Indicator UI settings:
        self.menu_length = 10
        self.text_width = 30 
        
        # Set up GUI utilities
        self.clip = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        self.clip.connect('owner-change',self.write_history)
        self.notif = Notify.Notification.new("Notify")
        
        self.make_menu()
        self.app.set_status(AppIndicator3.IndicatorStatus.ACTIVE)

    def read_history(self,*args):
        """ reads history file contents """
        data = OrderedDict()
        try:
            # load existing data if exists
            with open(self.history_file) as fd:
                    data = json.load(fd)
                    return OrderedDict(sorted(data.items(),reverse=True))
        except Exception as e:
            if (isinstance(e,FileNotFoundError) or 
               isinstance(e,json.decoder.JSONDecodeError)):
                return None

    def write_history(self,*args):
        """ Writes text to history file"""
        copied_text = self.clip.wait_for_text()
        copied_uri =  self.clip.wait_for_uris()
        data = OrderedDict()
        # If user copied files from file manager, ignore
        if copied_uri: return

        try:
            with open(self.history_file) as fd:
                data = OrderedDict(json.load(fd))

        except Exception as e:
            if (isinstance(e,FileNotFoundError) or 
                isinstance(e,json.decoder.JSONDecodeError)):
                pass 
            else:
                sys.stderr.write('>>> write_history:'+ str(e) +'\n') 
                

        # write current clipboard contents
        with open(self.history_file,'w') as fd:
            if self.debug:
               sys.stderr.write('>>> write_history: Appending to file' + '\n')
            timestamp = dt.datetime.now().strftime('%s')
            data[timestamp] = copied_text
            try:
                json.dump(data,fd,indent=4,sort_keys=True)
            except Exception as e:
                sys.stderr.write('>>> write_history:' + str(e) + '\n')
        self.make_menu()

    def write_to_clipboard(self,*args):
        """ Sets clipboard text """
        self.clip.set_text(args[-1],-1)

    def append_to_clipboard(self,*args):
        """ Combines existing cliboard contents
            with given text"""
        text = self.clip.wait_for_text()
        if not text: text = ""
        self.write_to_clipboard(self,text +" "+ args[-1])

    def prepend_to_clipboard(self,*args):
        """ Inserts given text before cliboard contents"""
        text = self.clip.wait_for_text()
        if not text: text = ""
        self.write_to_clipboard(self,args[-1] +" "+text)
    
    def remove_from_history(self,*args):
        text = args[-1]
        data = self.read_history()
        if not data: return
        match = None
        for timestamp,record in data.items():
            if record == text:
                match = timestamp
        if match:
            data.pop(match)

        with open(self.history_file,'w') as fd:
            try:
                json.dump(data,fd,indent=4,sort_keys=True)
            except Exception as e:
                sys.stderr.write('>>> write_history:' + str(e) + '\n')
        self.make_menu()

    def find_expression(self,*args):
        """ Searches stored text using python regex"""
        data = self.read_history()
        if not data: return
        
        expr = self.run_cmd(['zenity','--entry','--text','Enter expression to find:'])
        if not expr: return
        expr = expr.decode().strip()
        temp = tempfile.mkstemp()[1]
        if self.debug: sys.stderr.write('>>> find_expr,expr:'+ expr + '\n')

        written = False
        with open(temp,'w') as fd:
            for timestamp,text in sorted(data.items()):
                if re.search(expr,text):
                   if self.debug: sys.stderr.write('>>> find_expr:'+ timestamp +','  + text + '\n')
                   date = self.timestamp_to_date(timestamp)
                   fd.write(date + ':' + text + '\n')
                   written = True
        if written:
            subprocess.call(['zenity','--text-info','--filename',temp])
        else:
            subprocess.call(['zenity','--info',
                             '--text','Search done. Nothing found'])
        if os.unlink(temp):
            if self.debug: sys.stderr('>>> find_expr: temp file unlinked'+'\n')         

    def get_user_dir(self,**kwargs):
        for index,val in GLib.UserDirectory.__enum_values__.items():
            if val == kwargs['type']:
              return GLib.get_user_special_dir(index)

    def select_dir(self,*args):
        doc_dir = self.get_user_dir(type=GLib.UserDirectory.DIRECTORY_DOCUMENTS)
        cmd=['zenity','--file-selection','--directory','--filename',doc_dir]
        return self.run_cmd(cmd)

    def select_file(self,*args):
        doc_dir = self.get_user_dir(type=GLib.UserDirectory.DIRECTORY_DOCUMENTS)
        cmd=['zenity','--file-selection','--filename',doc_dir]
        return self.run_cmd(cmd)

    def load_file(self,*args):
        filename = self.select_file() 
        if not filename: return
        if not isinstance(filename,str):
            filename = filename.decode().strip()
        if not os.access(filename,os.R_OK):
            self.error_dialog('No permission to read' + filename)
            return
        with open(filename.decode().strip()) as fd:
            try:
                lines = fd.readlines()
            except Exception as e:
               self.error_dialog(str(e))
        if lines:
            self.write_to_clipboard("".join(lines))

    def dump_to_file(self,*args):
        destination = self.select_dir()
        if not destination: return
        destination = destination.decode().strip()
        if not os.access(destination,os.W_OK):
            self.error_dialog('No write permissions for '+destination)
            return
        filename = 'clipboard_' +dt.datetime.now().strftime('%s')+'.txt'
        text = self.clip.wait_for_text()
        if not text: 
            self.error_dialog('No text received')
            return
        with open(os.path.join(destination,filename),'w') as fd:
            fd.write(text +'\n')
        notif_text='Clipboard contents written to ' + filename
        self.send_notif(self.notif,'Indicator Bulletin',notif_text) 

 

    def clear_all(self,*args):
        """ Deletes all previously stored text items"""
        with open(self.history_file,'w') as fd:
            fd.write("")
        self.make_menu()

    def read_config(self):
        """ reads user config data """
        with open(self.config_file) as f:
             data = json.load(f)
             if self.debug:
                 print('>>> DEBUG: Contents of the config file\n',data)
             if self.debug:
                 print('>>> DEBUG:',repr(self.pattern),repr(self.replacement))

    def write_config(self,pattern,replacement,tool):
        """ Writes user configuration to file"""
        with open(self.config_file,'w') as f:
             data = { 'pattern':pattern,
                      'replacement':replacement,
                      'tool':tool  }
             json.dump(data,f,indent=4)

    def error_dialog(self,*args):
        subprocess.call(['zenity','--error','--text',args[-1]])

    def add_submenu(self,top_menu,label,**kwargs):
        menuitem = Gtk.MenuItem(label)
        if kwargs and 'icon' in kwargs.keys():
            menuitem = Gtk.ImageMenuItem.new_with_label(label)
            menuitem.set_always_show_image(True)
            if '/' in kwargs['icon']:
                icon = Gtk.Image.new_from_file(kwargs['icon'])
            else:
                icon = Gtk.Image.new_from_icon_name(kwargs['icon'], 48)
            menuitem.set_image(icon)
        submenu = Gtk.Menu()
        menuitem.set_submenu(submenu)
        top_menu.append(menuitem)
        menuitem.show()
        return submenu


    # TODO: rewrite this with kwargs
    def add_menu_item(self, menu_obj, item_type, image, label, action, args):
        """ dynamic function that can add menu items depending on
            the item type and other arguments"""
        menu_item, icon = None, None
        if item_type is Gtk.ImageMenuItem and label:
            menu_item = Gtk.ImageMenuItem.new_with_label(label)
            menu_item.set_always_show_image(True)
            if '/' in image:
                icon = Gtk.Image.new_from_file(image)
            else:
                icon = Gtk.Image.new_from_icon_name(image, 48)
            menu_item.set_image(icon)
        elif item_type is Gtk.ImageMenuItem and not label:
            menu_item = Gtk.ImageMenuItem()
            menu_item.set_always_show_image(True)
            if '/' in image:
                icon = Gtk.Image.new_from_file(image)
            else:
                icon = Gtk.Image.new_from_icon_name(image, 16)
            menu_item.set_image(icon)
        elif item_type is Gtk.MenuItem:
            menu_item = Gtk.MenuItem(label)
        elif item_type is Gtk.SeparatorMenuItem:
            menu_item = Gtk.SeparatorMenuItem()
        if action:
            menu_item.connect('activate', action, *args)
        menu_obj.append(menu_item)
        menu_item.show()
        return menu_item

    def make_menu(self,*args):
        """ generates entries in the indicator"""
        if hasattr(self, 'app_menu'):
            for item in self.app_menu.get_children():
                self.app_menu.remove(item)
        self.app_menu = Gtk.Menu()

        item = [self.app_menu,Gtk.MenuItem,
                None,'RECENT TEXT',
                None,[None]]
        header = self.add_menu_item(*item)
        header.set_sensitive(False)

        history = self.read_history()
        if self.debug:
            sys.stderr.write('>>> make_menu, history:' + str(history) + '\n')
        if history:
            counter = 0
            for timestamp,text in history.items():
                if counter > self.menu_length: break
                label = text
                if len(text) > self.text_width: label  = text[:self.text_width] + '...'
                text_entry = self.add_submenu(self.app_menu,label)
                item = [text_entry,Gtk.ImageMenuItem,'insert-text',
                        'Insert',self.write_to_clipboard,[text]]
                self.add_menu_item(*item)

                item = [text_entry,Gtk.ImageMenuItem,'gtk-add',
                        'Append',self.append_to_clipboard,[text]]
                self.add_menu_item(*item)

                item = [text_entry,Gtk.ImageMenuItem,'gtk-add',
                        'Prepend',self.prepend_to_clipboard,[text]]
                self.add_menu_item(*item)

                item = [text_entry,Gtk.ImageMenuItem,'edit-clear',
                        'Remove',self.remove_from_history,[text]]
                self.add_menu_item(*item)
                counter+=1
        else:

            item = [self.app_menu,Gtk.MenuItem,
                    None,'None',
                    None,[None]]
            self.add_menu_item(*item)

        item = [self.app_menu,Gtk.MenuItem,
                None,'OTHER OPTIONS',
                None,[None]]
        header = self.add_menu_item(*item)
        header.set_sensitive(False)

        # Search options
        search_menu = self.add_submenu(self.app_menu,'Find text',icon='gtk-find') 
        item = [search_menu,Gtk.MenuItem,
                None,'Find by expression',
                self.find_expression,[None]]
        self.add_menu_item(*item)

        # TODO:
        # implement search by timepstamp

#---

        load_menu = self.add_submenu(self.app_menu,'File operations',icon='gtk-open') 
        item = [load_menu,Gtk.MenuItem,
                None,'From file',
                self.load_file,[None]]
        self.add_menu_item(*item)

        item = [load_menu,Gtk.MenuItem,
                None,'Dump to file',
                self.dump_to_file,[None]]
        self.add_menu_item(*item)
#---

        item = [self.app_menu,Gtk.ImageMenuItem,
                'user-trash','Clear all',
                self.clear_all,[None]]
        self.add_menu_item(*item)
        item = [self.app_menu,Gtk.ImageMenuItem,
                'exit','Quit',
                self.quit,[None]]
        self.add_menu_item(*item)

        self.app.set_menu(self.app_menu) 

    def send_notif(self, n, title, text):
        """sends bubble notification"""
        try:
            if Notify.init(__file__):
                n.update(title, text)
                n.set_urgency(2)
                if not n.show():
                    raise SyntaxError("sending notification failed!")
            else:
                raise SyntaxError("can't initialize notification!")
        except SyntaxError as error:
            if self.debug: print(">> DEBUG:",str(error))
            if error == "sending notification failed!":
                Notify.uninit()
        else:
            Notify.uninit()

    def run(self):
        """ Launches the indicator """
        Gtk.main()

    def quit(self,*args):
        """ closes indicator """
        Gtk.main_quit()

    def timestamp_to_date(self,*args):
        timestamp = int(args[-1])
        dtobj = dt.datetime.fromtimestamp(timestamp)
        return dt.datetime.now().strftime('%Y %b %d %H:%M:%S')
        

    def run_cmd(self, cmdlist):
        """ Reusable function for running external commands """
        try:
            stdout = subprocess.check_output(cmdlist)
        except subprocess.CalledProcessError as sperror:
            if self.debug: print(">>> DEBUG: subprocess error\n",repr(sperror))
        else:
            if stdout:
                return stdout

def main():
    """ defines program entry point """
    indicator = IndicatorBulletin()
    signal.signal(signal.SIGINT,signal.SIG_DFL)
    indicator.run()

if __name__ == '__main__':
    main()
